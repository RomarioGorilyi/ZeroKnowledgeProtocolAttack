package main.java.kpi.ipt.asymcrypt.lab3;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Scanner;

/**
 * @author Roman Horilyi
 */
public class ZeroKnowledgeProtocolAttack {

    /**
     * Generated {@code BigInteger} number by the receiver.
     */
    private BigInteger t;

    /**
     * The modulus generated by the prover.
     */
    private BigInteger modulus;

    public void setModulus(BigInteger modulus) {
        this.modulus = modulus;
    }

    /**
     * Generates random {@code BigInteger} number of the specified length.
     *
     * @param length length of the generated X in bytes
     * @return {@code BigInteger} number
     */
    public static BigInteger generateRandomNumber(int length) {
        SecureRandom secureRandom = new SecureRandom();
        byte[] randoms = new byte[length];
        secureRandom.nextBytes(randoms);

        return new BigInteger(randoms).abs();
    }

    /**
     * Generates challenging {@code BigInteger y} that will be processed by the prover
     * in order to get a quadratic residue of it.
     *
     * @param modulus prover {@code BigInteger} modulus
     * @return {@code BigInteger y}
     */
    public BigInteger generateY(BigInteger modulus) {
        t = generateRandomNumber(32);
        BigInteger y = t.pow(2).mod(modulus);
        System.out.println("y: " + y.toString(16));

        return y;
    }

    /**
     * Tries to make an expansion of the modulus {@link #modulus}.
     *
     * @param root square root of previously generated y that is a quadratic residue
     * @return {@code true} if expansion of the modulus is successful
     */
    public boolean tryToMakeExpansionOfModulus(BigInteger root) {
        if ((t.compareTo(root) != 0) && (t.compareTo(root) != 0)) {
            BigInteger p = modulus.gcd(t.add(root));
            BigInteger q = modulus.divide(p);
            if ((p.compareTo(BigInteger.ONE) != 0) && (q.compareTo(BigInteger.ONE) != 0)) {
                System.out.println("p: " + p.toString(16));
                System.out.println("q: " + q.toString(16));
            }

            return true;
        } else {
            return false;
        }
    }

    /**
     * Makes an attack on the zero knowledge protocol while its result isn't successful.
     *
     * @param attackCounter counter of attack attempts
     * @return number of attempted attacks on the protocol
     */
    public int makeAttack(int attackCounter) {
        generateY(modulus);

        System.out.println("Enter root: ");
        Scanner scanner = new Scanner(System.in);
        BigInteger root = new BigInteger(scanner.next(), 16);

        boolean isAttackSuccessful = tryToMakeExpansionOfModulus(root);
        attackCounter++;
        if (!isAttackSuccessful) {
            makeAttack(attackCounter++);
        }

        return attackCounter;
    }
}
